FILE array_test.in LLVM CODE
; ModuleID = 'program'
source_filename = "program"

@0 = global i64* null
@1 = private unnamed_addr constant [15 x i8] c"Printing array\00", align 1
@2 = private unnamed_addr constant [6 x i8] c"\22%s\22\0A\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1

declare i32 @printf(i8*, ...)

declare i8* @malloc(i64)

define i64 @main() {
entry:
  %0 = alloca i64
  store i64 0, i64* %0
  %1 = call i8* @malloc(i64 mul (i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64), i64 10))
  %2 = bitcast i8* %1 to i64*
  store i64* %2, i64** @0
  store i64 0, i64* %0
  br label %3

3:                                                ; preds = %6, %entry
  %4 = load i64, i64* %0
  %5 = icmp slt i64 %4, 10
  br i1 %5, label %6, label %13

6:                                                ; preds = %3
  %7 = load i64, i64* %0
  %8 = load i64*, i64** @0
  %9 = load i64, i64* %0
  %10 = getelementptr i64, i64* %8, i64 %9
  store i64 %7, i64* %10
  %11 = load i64, i64* %0
  %12 = add i64 %11, 1
  store i64 %12, i64* %0
  br label %3

13:                                               ; preds = %3
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1, i32 0, i32 0))
  store i64 0, i64* %0
  br label %15

15:                                               ; preds = %18, %13
  %16 = load i64, i64* %0
  %17 = icmp slt i64 %16, 10
  br i1 %17, label %18, label %26

18:                                               ; preds = %15
  %19 = load i64*, i64** @0
  %20 = load i64, i64* %0
  %21 = getelementptr i64, i64* %19, i64 %20
  %22 = load i64, i64* %21
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i64 %22)
  %24 = load i64, i64* %0
  %25 = add i64 %24, 1
  store i64 %25, i64* %0
  br label %15

26:                                               ; preds = %15
  ret i64 0
}

RETURN 0

OUTPUT
"Printing array"
0
1
2
3
4
5
6
7
8
9
