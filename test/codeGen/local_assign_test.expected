FILE local_assign_test.monga LLVM CODE
; ModuleID = 'program'
source_filename = "program"

@0 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%lf\0A\00", align 1

declare i32 @printf(i8*, ...)

declare i8* @malloc(i64)

define i64 @main() {
entry:
  %0 = alloca i64
  store i64 0, i64* %0
  %1 = alloca double
  store double 0.000000e+00, double* %1
  store i64 10, i64* %0
  %2 = load i64, i64* %0
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i64 %2)
  store double 1.000000e+00, double* %1
  %4 = load double, double* %1
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), double %4)
  store i64 11, i64* %0
  %6 = load i64, i64* %0
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i64 %6)
  store double 1.150000e+01, double* %1
  %8 = load double, double* %1
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), double %8)
  ret i64 0
}

RETURN 0

OUTPUT
10
1.000000
11
11.500000
