FILE scope_test.monga LLVM CODE
; ModuleID = 'program'
source_filename = "program"

@0 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1

declare i32 @printf(i8*, ...)

declare i8* @malloc(i64)

define i64 @main() {
entry:
  %0 = alloca i64
  store i64 0, i64* %0
  %1 = alloca i64
  store i64 0, i64* %1
  store i64 10, i64* %0
  %2 = load i64, i64* %0
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i64 %2)
  store i64 11, i64* %1
  %4 = load i64, i64* %1
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i64 %4)
  %6 = alloca i64
  store i64 0, i64* %6
  store i64 1, i64* %6
  %7 = load i64, i64* %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i64 %7)
  store i64 2, i64* %1
  %9 = load i64, i64* %1
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i64 %9)
  %11 = load i64, i64* %0
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i64 %11)
  %13 = load i64, i64* %1
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i64 %13)
  ret i64 0
}

RETURN 0

OUTPUT
10
11
1
2
10
2
