BUILDING FILE inputs/test2.in
; ModuleID = 'program'
source_filename = "program"

@0 = global i1 false
@1 = global i1 false
@2 = global i64* null
@3 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1

declare i32 @printf(i8*, ...)

declare i8* @malloc(i64)

define i64 @main() {
entry:
  %0 = call i8* @malloc(i64 10)
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** @2
  %2 = load i64*, i64** @2
  %3 = getelementptr i64, i64* %2, i64 0
  store i64 13, i64* %3
  %4 = load i64*, i64** @2
  %5 = getelementptr i64, i64* %4, i64 9
  store i64 12, i64* %5
  %6 = load i64*, i64** @2
  %7 = getelementptr i64, i64* %6, i64 0
  %8 = load i64, i64* %7
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i64 %8)
  %10 = load i64*, i64** @2
  %11 = getelementptr i64, i64* %10, i64 9
  %12 = load i64, i64* %11
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i64 %12)
  ret i64 0
}

MONGA IO OUTPUT
DONE inputs/test2.in

13
12
