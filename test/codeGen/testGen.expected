BUILDING FILE inputs/test2.in
; ModuleID = 'program'
source_filename = "program"

@0 = global i1 false
@1 = global i1 false
@2 = global i64 0
@3 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1

declare i32 @printf(i8*, ...)

define i64 @foo(i64) {
entry:
  %1 = alloca i64
  store i64 %0, i64* %1
  %2 = load i64, i64* %1
  ret i64 %2
}

define i64 @main() {
entry:
  %0 = call i64 @foo(i64 42)
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i64 %0)
  store i1 true, i1* @0
  br i1 true, label %2, label %6

2:                                                ; preds = %entry
  br i1 true, label %3, label %6

3:                                                ; preds = %2
  store i64 11, i64* @2
  %4 = load i64, i64* @2
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i64 %4)
  br label %9

6:                                                ; preds = %2, %entry
  store i64 20, i64* @2
  %7 = load i64, i64* @2
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i64 %7)
  br label %9

9:                                                ; preds = %6, %3
  ret i64 0
}

MONGA IO OUTPUT
DONE inputs/test2.in

42
11
