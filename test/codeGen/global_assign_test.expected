FILE global_assign_test.monga LLVM CODE
; ModuleID = 'program'
source_filename = "program"

@0 = global i64 0
@1 = global i64 0
@2 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1

declare i32 @printf(i8*, ...)

declare i8* @malloc(i64)

define i64 @main() {
entry:
  store i64 10, i64* @0
  %0 = load i64, i64* @0
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %0)
  %2 = load i64, i64* @0
  store i64 %2, i64* @1
  %3 = load i64, i64* @1
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %3)
  store i64 11, i64* @1
  %5 = load i64, i64* @0
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %5)
  %7 = load i64, i64* @1
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %7)
  ret i64 0
}

RETURN 0

OUTPUT
10
10
10
11
