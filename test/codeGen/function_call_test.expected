FILE function_call_test.in LLVM CODE
; ModuleID = 'program'
source_filename = "program"

@0 = global i64 0
@1 = private unnamed_addr constant [14 x i8] c"Hello, World!\00", align 1
@2 = private unnamed_addr constant [6 x i8] c"\22%s\22\0A\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1

declare i32 @printf(i8*, ...)

declare i8* @malloc(i64)

define void @foo() {
entry:
  %0 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1, i32 0, i32 0))
  ret void
}

define i64 @bar(i64) {
entry:
  %1 = alloca i64
  store i64 %0, i64* %1
  %2 = alloca i64
  store i64 0, i64* %2
  %3 = load i64, i64* %1
  store i64 %3, i64* @0
  %4 = load i64, i64* @0
  store i64 %4, i64* %2
  %5 = load i64, i64* %2
  ret i64 %5
}

define i64 @main() {
entry:
  call void @foo()
  %0 = call i64 @bar(i64 10)
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i64 %0)
  %2 = call i64 @bar(i64 11)
  %3 = add i64 %2, 1
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i64 %3)
  ret i64 0
}

RETURN 0

OUTPUT
"Hello, World!"
10
12
