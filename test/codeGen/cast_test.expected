FILE cast_test.monga LLVM CODE
; ModuleID = 'program'
source_filename = "program"

@0 = private unnamed_addr constant [10 x i8] c"Bool cast\00", align 1
@1 = private unnamed_addr constant [6 x i8] c"\22%s\22\0A\00", align 1
@2 = private unnamed_addr constant [10 x i8] c"Bool: %d\0A\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"%lf\0A\00", align 1
@5 = private unnamed_addr constant [10 x i8] c"Char cast\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@7 = private unnamed_addr constant [6 x i8] c"'%c'\0A\00", align 1
@8 = private unnamed_addr constant [9 x i8] c"Int cast\00", align 1
@9 = private unnamed_addr constant [11 x i8] c"Float cast\00", align 1
@10 = private unnamed_addr constant [12 x i8] c"Signed cast\00", align 1
@11 = private unnamed_addr constant [22 x i8] c"Cast that doesn't fit\00", align 1

declare i32 @printf(i8*, ...)

declare i8* @malloc(i64)

define i64 @main() {
entry:
  %0 = alloca i1
  store i1 false, i1* %0
  %1 = alloca i8
  store i8 0, i8* %1
  %2 = alloca i64
  store i64 0, i64* %2
  %3 = alloca double
  store double 0.000000e+00, double* %3
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i32 0, i32 0))
  store i1 true, i1* %0
  %5 = load i1, i1* %0
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i32 0, i32 0), i1 %5)
  %7 = load i1, i1* %0
  %8 = zext i1 %7 to i64
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i64 %8)
  %10 = load i1, i1* %0
  %11 = zext i1 %10 to i8
  %12 = sext i8 %11 to i64
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i64 %12)
  %14 = load i1, i1* %0
  %15 = uitofp i1 %14 to double
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), double %15)
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i32 0, i32 0))
  %18 = load i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0)
  store i8 %18, i8* %1
  %19 = load i8, i8* %1
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i32 0, i32 0), i8 %19)
  %21 = load i8, i8* %1
  %22 = sext i8 %21 to i64
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i64 %22)
  %24 = load i8, i8* %1
  %25 = sitofp i8 %24 to double
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), double %25)
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @8, i32 0, i32 0))
  store i64 65, i64* %2
  %28 = load i64, i64* %2
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i64 %28)
  %30 = load i64, i64* %2
  %31 = trunc i64 %30 to i8
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i32 0, i32 0), i8 %31)
  %33 = load i64, i64* %2
  %34 = sitofp i64 %33 to double
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), double %34)
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @9, i32 0, i32 0))
  store double 6.510000e+01, double* %3
  %37 = load double, double* %3
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), double %37)
  %39 = load double, double* %3
  %40 = fptosi double %39 to i8
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @7, i32 0, i32 0), i8 %40)
  %42 = load double, double* %3
  %43 = fptosi double %42 to i64
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i64 %43)
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i32 0, i32 0))
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i64 -1)
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @11, i32 0, i32 0))
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i64 -128)
  ret i64 0
}

RETURN 0

OUTPUT
"Bool cast"
Bool: 1
1
1
1.000000
"Char cast"
'A'
65
65.000000
"Int cast"
65
'A'
65.000000
"Float cast"
65.100000
'A'
65
"Signed cast"
-1
"Cast that doesn't fit"
-128
