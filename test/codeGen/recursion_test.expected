FILE recursion_test.in LLVM CODE
; ModuleID = 'program'
source_filename = "program"

@0 = private unnamed_addr constant [10 x i8] c"Factorial\00", align 1
@1 = private unnamed_addr constant [6 x i8] c"\22%s\22\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"Fib\00", align 1

declare i32 @printf(i8*, ...)

declare i8* @malloc(i64)

define i64 @fat(i64) {
entry:
  %1 = alloca i64
  store i64 %0, i64* %1
  %2 = load i64, i64* %1
  %3 = icmp sge i64 %2, 1
  br i1 %3, label %4, label %10

4:                                                ; preds = %entry
  %5 = load i64, i64* %1
  %6 = load i64, i64* %1
  %7 = sub i64 %6, 1
  %8 = call i64 @fat(i64 %7)
  %9 = mul i64 %5, %8
  ret i64 %9

10:                                               ; preds = %entry
  ret i64 1
}

define i64 @fib(i64) {
entry:
  %1 = alloca i64
  store i64 %0, i64* %1
  %2 = load i64, i64* %1
  %3 = icmp eq i64 %2, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %entry
  ret i64 0

5:                                                ; preds = %entry
  %6 = load i64, i64* %1
  %7 = icmp eq i64 %6, 1
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  ret i64 1

9:                                                ; preds = %5
  %10 = load i64, i64* %1
  %11 = sub i64 %10, 1
  %12 = call i64 @fib(i64 %11)
  %13 = load i64, i64* %1
  %14 = sub i64 %13, 2
  %15 = call i64 @fib(i64 %14)
  %16 = add i64 %12, %15
  ret i64 %16

17:                                               ; No predecessors!
  br label %18

18:                                               ; preds = %17
  ret i64 0
}

define i64 @main() {
entry:
  %0 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i32 0, i32 0))
  %1 = call i64 @fat(i64 -1)
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %1)
  %3 = call i64 @fat(i64 0)
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %3)
  %5 = call i64 @fat(i64 1)
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %5)
  %7 = call i64 @fat(i64 2)
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %7)
  %9 = call i64 @fat(i64 3)
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %9)
  %11 = call i64 @fat(i64 4)
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %11)
  %13 = call i64 @fat(i64 5)
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %13)
  %15 = call i64 @fat(i64 6)
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %15)
  %17 = call i64 @fat(i64 7)
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %17)
  %19 = call i64 @fat(i64 8)
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %19)
  %21 = call i64 @fat(i64 9)
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %21)
  %23 = call i64 @fat(i64 10)
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %23)
  %25 = call i64 @fat(i64 11)
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %25)
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0))
  %28 = call i64 @fib(i64 0)
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %28)
  %30 = call i64 @fib(i64 1)
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %30)
  %32 = call i64 @fib(i64 2)
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %32)
  %34 = call i64 @fib(i64 3)
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %34)
  %36 = call i64 @fib(i64 4)
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %36)
  %38 = call i64 @fib(i64 5)
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %38)
  %40 = call i64 @fib(i64 6)
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %40)
  %42 = call i64 @fib(i64 7)
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %42)
  %44 = call i64 @fib(i64 8)
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %44)
  %46 = call i64 @fib(i64 9)
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %46)
  %48 = call i64 @fib(i64 10)
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %48)
  %50 = call i64 @fib(i64 11)
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i64 %50)
  ret i64 0
}

RETURN 0

OUTPUT
"Factorial"
1
1
1
2
6
24
120
720
5040
40320
362880
3628800
39916800
"Fib"
0
1
1
2
3
5
8
13
21
34
55
89
