PARSING FILE inputs/test1.in
var_def begin
	id = bananas
	type = int
var_def end

var_def begin
	id = bananas1
	type = [int]
var_def end

var_def begin
	id = bananas2
	type = [[int]]
var_def end

var_def begin
	id = bananas3
	type = [[[int]]]
var_def end

var_def begin
	id = bananas4
	type = [[[[int]]]]
var_def end

var_def begin
	id = bananas5
	type = [[[[[int]]]]]
var_def end

var_def begin
	id = bananas6
	type = [[[[[[int]]]]]]
var_def end

var_def begin
	id = bananas7
	type = [[[[[[[int]]]]]]]
var_def end

var_def begin
	id = bananas8
	type = [[[[[[[[int]]]]]]]]
var_def end

var_def begin
	id = bananas9
	type = [[[[[[[[[int]]]]]]]]]
var_def end

var_def begin
	id = a
	type = char
var_def end

var_def begin
	id = b
	type = float
var_def end

var_def begin
	id = c
	type = bool
var_def end

func_def begin
	id = f0
	signature = ()
	block = block begin
	block end
func_def end

func_def begin
	id = f1
	signature = ()
	return_type = int
	block = block begin
	block end
func_def end

func_def begin
	id = f2
	signature = ()
	return_type = char
	block = block begin
	block end
func_def end

func_def begin
	id = f3
	signature = ()
	return_type = float
	block = block begin
	block end
func_def end

func_def begin
	id = f4
	signature = ()
	return_type = bool
	block = block begin
	block end
func_def end

func_def begin
	id = f5
	signature = ()
	return_type = [int]
	block = block begin
	block end
func_def end

func_def begin
	id = f6
	signature = ()
	return_type = [[int]]
	block = block begin
	block end
func_def end

func_def begin
	id = g1
	signature = (a : int)
	block = block begin
	block end
func_def end

func_def begin
	id = g2
	signature = (a : int, b : float)
	block = block begin
	block end
func_def end

func_def begin
	id = g3
	signature = (a : int, b : float, c : bool)
	block = block begin
	block end
func_def end

func_def begin
	id = g4
	signature = (a : int, b : float, c : bool, d : char)
	block = block begin
	block end
func_def end

func_def begin
	id = h
	signature = ()
	block = block begin
		block begin
		block end
		block begin
		block end
		block begin
		block end
		block begin
		block end
	block end
func_def end

func_def begin
	id = h1
	signature = ()
	block = block begin
		block begin
		block end
	block end
func_def end

func_def begin
	id = h2
	signature = ()
	block = block begin
		block begin
			block begin
			block end
		block end
	block end
func_def end

func_def begin
	id = h3
	signature = ()
	block = block begin
		block begin
			block begin
				block begin
				block end
			block end
		block end
	block end
func_def end

func_def begin
	id = h4
	signature = ()
	block = block begin
		block begin
			block begin
				block begin
					block begin
					block end
				block end
			block end
		block end
	block end
func_def end

DONE inputs/test1.in

PARSING FILE inputs/test2.in
func_def begin
	id = g0
	signature = ()
	block = block begin
	block end
func_def end

func_def begin
	id = g1
	signature = (a : bool)
	block = block begin
	block end
func_def end

func_def begin
	id = g2
	signature = (a : bool, b : int)
	block = block begin
	block end
func_def end

func_def begin
	id = g3
	signature = (a : bool, b : int, c : float)
	block = block begin
	block end
func_def end

func_def begin
	id = g4
	signature = (a : bool, b : int, c : float, d : [int])
	block = block begin
	block end
func_def end

func_def begin
	id = f0
	signature = ()
	block = block begin
		var_def begin
			id = a

			type = bool
var_def end

		var_def begin
			id = b

			type = int
var_def end

		var_def begin
			id = c

			type = float
var_def end

		var_def begin
			id = d

			type = [int]
var_def end

		if_else_statement begin
			condition = true {bool}

			then_block = block begin
			block end
		if_else_statement end

		if_else_statement begin
			condition = true {bool}

			then_block = block begin
			block end

			else_block = block begin
			block end
		if_else_statement end

		if_else_statement begin
			condition = true {bool}

			then_block = block begin
			block end

			else_block = block begin
				if_else_statement begin
					condition = true {bool}

					then_block = block begin
					block end

					else_block = block begin
						if_else_statement begin
							condition = true {bool}

							then_block = block begin
							block end

							else_block = block begin
							block end
						if_else_statement end

					block end
				if_else_statement end

			block end
		if_else_statement end

		while_statement begin
			condition = true {bool}

			block = block begin
			block end
		while_statement end

		assign_stat begin
			lhs = a {bool}

			rhs = true {bool}
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = 0 {int}
		assign_stat end

		assign_stat begin
			lhs = c {float}

			rhs = 0x0p+0 {float}
		assign_stat end

		fcall_stat begin
			name = g0
			parameters = exp_list begin
				exp_list end
		fcall_stat end

		fcall_stat begin
			name = g1
			parameters = exp_list begin
				a {bool}
				exp_list end
		fcall_stat end

		fcall_stat begin
			name = g2
			parameters = exp_list begin
				a {bool}
				;
				b {int}
				exp_list end
		fcall_stat end

		fcall_stat begin
			name = g3
			parameters = exp_list begin
				a {bool}
				;
				b {int}
				;
				c {float}
				exp_list end
		fcall_stat end

		fcall_stat begin
			name = g4
			parameters = exp_list begin
				true {bool}
				;
				add_exp begin {int}
					lhs = b {int}

					rhs = b {int}
				add_exp end
				;
				add_exp begin {float}
					lhs = c {float}

					rhs = cast_exp begin {int}
						exp = b {int}

						type = float
					lookup_exp end
				add_exp end
				;
				d {[int]}
				exp_list end
		fcall_stat end

		put_stat begin
			exp = a {bool}
		put_stat end

		put_stat begin
			exp = "Hello, World!" {[char]}
		put_stat end

		block begin
		block end
		return_statement begin
		return_statement end

	block end
func_def end

func_def begin
	id = f1
	signature = ()
	return_type = bool
	block = block begin
		var_def begin
			id = a

			type = bool
var_def end

		var_def begin
			id = b

			type = bool
var_def end

		if_else_statement begin
			condition = true {bool}

			then_block = block begin
				while_statement begin
					condition = true {bool}

					block = block begin
						if_else_statement begin
							condition = false {bool}

							then_block = block begin
							block end
						if_else_statement end

						put_stat begin
							exp = a {bool}
						put_stat end

						assign_stat begin
							lhs = a {bool}

							rhs = b {bool}
						assign_stat end

						return_statement begin
							return_exp = a {bool}
						return_statement end

					block end
				while_statement end

			block end

			else_block = block begin
				while_statement begin
					condition = true {bool}

					block = block begin
						if_else_statement begin
							condition = false {bool}

							then_block = block begin
							block end

							else_block = block begin
							block end
						if_else_statement end

						put_stat begin
							exp = a {bool}
						put_stat end

						assign_stat begin
							lhs = a {bool}

							rhs = b {bool}
						assign_stat end

						return_statement begin
							return_exp = b {bool}
						return_statement end

					block end
				while_statement end

			block end
		if_else_statement end

	block end
func_def end

DONE inputs/test2.in

PARSING FILE inputs/test3.in
var_def begin
	id = a
	type = char
var_def end

var_def begin
	id = a2
	type = char
var_def end

var_def begin
	id = a3
	type = char
var_def end

var_def begin
	id = b
	type = char
var_def end

var_def begin
	id = c
	type = char
var_def end

var_def begin
	id = d
	type = char
var_def end

var_def begin
	id = e
	type = char
var_def end

var_def begin
	id = f
	type = char
var_def end

var_def begin
	id = g
	type = char
var_def end

func_def begin
	id = ff0
	signature = ()
	return_type = int
	block = block begin
		return_statement begin
			return_exp = 0 {int}
		return_statement end

	block end
func_def end

func_def begin
	id = ff1
	signature = (b : bool)
	return_type = [float]
	block = block begin
		var_def begin
			id = x

			type = [float]
var_def end

		return_statement begin
			return_exp = x {[float]}
		return_statement end

	block end
func_def end

func_def begin
	id = ff4
	signature = (a : float, b : int, c : bool, d : bool)
	return_type = bool
	block = block begin
		return_statement begin
			return_exp = true {bool}
		return_statement end

	block end
func_def end

func_def begin
	id = main
	signature = ()
	block = block begin
		var_def begin
			id = a

			type = bool
var_def end

		var_def begin
			id = a2

			type = bool
var_def end

		var_def begin
			id = a3

			type = [bool]
var_def end

		var_def begin
			id = b

			type = int
var_def end

		var_def begin
			id = c

			type = [char]
var_def end

		var_def begin
			id = d

			type = float
var_def end

		var_def begin
			id = e

			type = [int]
var_def end

		var_def begin
			id = f

			type = [[int]]
var_def end

		var_def begin
			id = g

			type = [[[int]]]
var_def end

		block begin
			var_def begin
				id = a

				type = char
var_def end

			var_def begin
				id = a2

				type = char
var_def end

			var_def begin
				id = a3

				type = char
var_def end

			var_def begin
				id = b

				type = char
var_def end

			var_def begin
				id = c

				type = char
var_def end

			var_def begin
				id = d

				type = char
var_def end

			var_def begin
				id = e

				type = char
var_def end

			var_def begin
				id = f

				type = char
var_def end

			var_def begin
				id = g

				type = char
var_def end

		block end
		assign_stat begin
			lhs = b {int}

			rhs = 1 {int}
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = true {bool}
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = false {bool}
		assign_stat end

		assign_stat begin
			lhs = c {[char]}

			rhs = "Hello, World!" {[char]}
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = 0 {int}
		assign_stat end

		assign_stat begin
			lhs = d {float}

			rhs = 0x0p+0 {float}
		assign_stat end

		assign_stat begin
			lhs = a2 {bool}

			rhs = a {bool}
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = lookup_exp begin {int}
				var = e {[int]}

				idx = 0 {int}
			lookup_exp end
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = lookup_exp begin {int}
				var = lookup_exp begin {[int]}
					var = f {[[int]]}

					idx = 0 {int}
				lookup_exp end

				idx = 0 {int}
			lookup_exp end
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = lookup_exp begin {int}
				var = lookup_exp begin {[int]}
					var = lookup_exp begin {[[int]]}
						var = g {[[[int]]]}

						idx = 0 {int}
					lookup_exp end

					idx = 0 {int}
				lookup_exp end

				idx = 0 {int}
			lookup_exp end
		assign_stat end

		assign_stat begin
			lhs = e {[int]}

			rhs = lookup_exp begin {[int]}
				var = f {[[int]]}

				idx = 0 {int}
			lookup_exp end
		assign_stat end

		assign_stat begin
			lhs = e {[int]}

			rhs = lookup_exp begin {[int]}
				var = lookup_exp begin {[[int]]}
					var = g {[[[int]]]}

					idx = 0 {int}
				lookup_exp end

				idx = 0 {int}
			lookup_exp end
		assign_stat end

		assign_stat begin
			lhs = f {[[int]]}

			rhs = lookup_exp begin {[[int]]}
				var = g {[[[int]]]}

				idx = 0 {int}
			lookup_exp end
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = unary_minus_exp begin {int}
				exp = 1 {int}
			unary_minus_exp end
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = unary_minus_exp begin {int}
				exp = b {int}
			unary_minus_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = unary_not_exp begin {bool}
				exp = true {bool}
			unary_not_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = unary_not_exp begin {bool}
				exp = a2 {bool}
			unary_not_exp end
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = mul_exp begin {int}
				lhs = 1 {int}

				rhs = 1 {int}
			mul_exp end
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = mul_exp begin {int}
				lhs = b {int}

				rhs = 1 {int}
			mul_exp end
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = mul_exp begin {int}
				lhs = 1 {int}

				rhs = b {int}
			mul_exp end
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = mul_exp begin {int}
				lhs = b {int}

				rhs = b {int}
			mul_exp end
		assign_stat end

		assign_stat begin
			lhs = d {float}

			rhs = add_exp begin {float}
				lhs = 0x1p+0 {float}

				rhs = cast_exp begin {int}
					exp = 1 {int}

					type = float
				lookup_exp end
			add_exp end
		assign_stat end

		assign_stat begin
			lhs = d {float}

			rhs = add_exp begin {float}
				lhs = cast_exp begin {int}
					exp = b {int}

					type = float
				lookup_exp end

				rhs = 0x1p+0 {float}
			add_exp end
		assign_stat end

		assign_stat begin
			lhs = d {float}

			rhs = add_exp begin {float}
				lhs = 0x1p+0 {float}

				rhs = cast_exp begin {int}
					exp = b {int}

					type = float
				lookup_exp end
			add_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = equals_exp begin {bool}
				lhs = 1 {int}

				rhs = 1 {int}
			equals_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = add_exp begin {bool}
				lhs = 1 {int}

				rhs = 1 {int}
			add_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = greater_than_exp begin {bool}
				lhs = 1 {int}

				rhs = 1 {int}
			greater_than_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = less_than_exp begin {bool}
				lhs = 1 {int}

				rhs = 1 {int}
			less_than_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = less_equal_exp begin {bool}
				lhs = 1 {int}

				rhs = 1 {int}
			less_equal_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = greater_equal_exp begin {bool}
				lhs = 1 {int}

				rhs = 1 {int}
			greater_equal_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = equals_exp begin {bool}
				lhs = 1 {int}

				rhs = b {int}
			equals_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = equals_exp begin {bool}
				lhs = b {int}

				rhs = 1 {int}
			equals_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = equals_exp begin {bool}
				lhs = b {int}

				rhs = b {int}
			equals_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = and_exp begin {bool}
				lhs = true {bool}

				rhs = true {bool}
			and_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = and_exp begin {bool}
				lhs = a2 {bool}

				rhs = true {bool}
			and_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = and_exp begin {bool}
				lhs = true {bool}

				rhs = a2 {bool}
			and_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = or_exp begin {bool}
				lhs = true {bool}

				rhs = true {bool}
			or_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = or_exp begin {bool}
				lhs = a2 {bool}

				rhs = true {bool}
			or_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = or_exp begin {bool}
				lhs = true {bool}

				rhs = a2 {bool}
			or_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = or_exp begin {bool}
				lhs = or_exp begin {bool}
					lhs = and_exp begin {bool}
						lhs = and_exp begin {bool}
							lhs = true {bool}

							rhs = true {bool}
						and_exp end

						rhs = true {bool}
					and_exp end

					rhs = and_exp begin {bool}
						lhs = and_exp begin {bool}
							lhs = true {bool}

							rhs = true {bool}
						and_exp end

						rhs = true {bool}
					and_exp end
				or_exp end

				rhs = and_exp begin {bool}
					lhs = and_exp begin {bool}
						lhs = true {bool}

						rhs = true {bool}
					and_exp end

					rhs = true {bool}
				and_exp end
			or_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = or_exp begin {bool}
				lhs = or_exp begin {bool}
					lhs = and_exp begin {bool}
						lhs = and_exp begin {bool}
							lhs = true {bool}

							rhs = a2 {bool}
						and_exp end

						rhs = lookup_exp begin {bool}
							var = a3 {[bool]}

							idx = 0 {int}
						lookup_exp end
					and_exp end

					rhs = and_exp begin {bool}
						lhs = and_exp begin {bool}
							lhs = equals_exp begin {bool}
								lhs = 1 {int}

								rhs = 1 {int}
							equals_exp end

							rhs = less_than_exp begin {bool}
								lhs = b {int}

								rhs = 1 {int}
							less_than_exp end
						and_exp end

						rhs = greater_equal_exp begin {bool}
							lhs = lookup_exp begin {int}
								var = e {[int]}

								idx = 0 {int}
							lookup_exp end

							rhs = 1 {int}
						greater_equal_exp end
					and_exp end
				or_exp end

				rhs = and_exp begin {bool}
					lhs = and_exp begin {bool}
						lhs = equals_exp begin {bool}
							lhs = add_exp begin {int}
								lhs = 1 {int}

								rhs = 1 {int}
							add_exp end

							rhs = 2 {int}
						equals_exp end

						rhs = less_than_exp begin {bool}
							lhs = mul_exp begin {int}
								lhs = 1 {int}

								rhs = 1 {int}
							mul_exp end

							rhs = 2 {int}
						less_than_exp end
					and_exp end

					rhs = unary_not_exp begin {bool}
						exp = true {bool}
					unary_not_exp end
				and_exp end
			or_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = greater_equal_exp begin {bool}
				lhs = add_exp begin {int}
					lhs = 1 {int}

					rhs = 1 {int}
				add_exp end

				rhs = 2 {int}
			greater_equal_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = less_equal_exp begin {bool}
				lhs = 2 {int}

				rhs = add_exp begin {int}
					lhs = 1 {int}

					rhs = 1 {int}
				add_exp end
			less_equal_exp end
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = add_exp begin {int}
				lhs = 1 {int}

				rhs = mul_exp begin {int}
					lhs = 2 {int}

					rhs = 3 {int}
				mul_exp end
			add_exp end
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = add_exp begin {int}
				lhs = mul_exp begin {int}
					lhs = 3 {int}

					rhs = 2 {int}
				mul_exp end

				rhs = 1 {int}
			add_exp end
		assign_stat end

		assign_stat begin
			lhs = d {float}

			rhs = add_exp begin {float}
				lhs = cast_exp begin {int}
					exp = add_exp begin {int}
							lhs = 1 {int}

							rhs = 1 {int}
						add_exp end

					type = float
				lookup_exp end

				rhs = mul_exp begin {float}
					lhs = mul_exp begin {float}
						lhs = cast_exp begin {int}
							exp = 2 {int}

							type = float
						lookup_exp end

						rhs = unary_minus_exp begin {float}
							exp = d {float}
						unary_minus_exp end
					mul_exp end

					rhs = cast_exp begin {int}
						exp = lookup_exp begin {int}
								var = lookup_exp begin {[int]}
									var = f {[[int]]}

									idx = 1 {int}
								lookup_exp end

								idx = 0 {int}
							lookup_exp end

						type = float
					lookup_exp end
				mul_exp end
			add_exp end
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = call_exp begin {int}
				name = ff0

				parameters = exp_list begin
					exp_list end
			call_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = call_exp begin {bool}
				name = ff4

				parameters = exp_list begin
					d {float}
					;
					b {int}
					;
					a {bool}
					;
					a2 {bool}
					exp_list end
			call_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = call_exp begin {bool}
				name = ff4

				parameters = exp_list begin
					add_exp begin {float}
						lhs = cast_exp begin {int}
							exp = 1 {int}

							type = float
						lookup_exp end

						rhs = 0x1p+0 {float}
					add_exp end
					;
					add_exp begin {int}
						lhs = 1 {int}

						rhs = mul_exp begin {int}
							lhs = 2 {int}

							rhs = 3 {int}
						mul_exp end
					add_exp end
					;
					true {bool}
					;
					a {bool}
					exp_list end
			call_exp end
		assign_stat end

		assign_stat begin
			lhs = d {float}

			rhs = lookup_exp begin {float}
				var = call_exp begin {[float]}
					name = ff1

					parameters = exp_list begin
						a {bool}
						exp_list end
				call_exp end

				idx = 0 {int}
			lookup_exp end
		assign_stat end

		assign_stat begin
			lhs = d {float}

			rhs = mul_exp begin {float}
				lhs = cast_exp begin {int}
					exp = 1 {int}

					type = float
				lookup_exp end

				rhs = lookup_exp begin {float}
					var = call_exp begin {[float]}
						name = ff1

						parameters = exp_list begin
							a2 {bool}
							exp_list end
					call_exp end

					idx = 0 {int}
				lookup_exp end
			mul_exp end
		assign_stat end

		assign_stat begin
			lhs = b {int}

			rhs = unary_minus_exp begin {int}
				exp = call_exp begin {int}
					name = ff0

					parameters = exp_list begin
						exp_list end
				call_exp end
			unary_minus_exp end
		assign_stat end

		assign_stat begin
			lhs = a {bool}

			rhs = call_exp begin {bool}
				name = ff4

				parameters = exp_list begin
					mul_exp begin {float}
						lhs = cast_exp begin {int}
							exp = unary_minus_exp begin {int}
									exp = 3 {int}
								unary_minus_exp end

							type = float
						lookup_exp end

						rhs = lookup_exp begin {float}
							var = call_exp begin {[float]}
								name = ff1

								parameters = exp_list begin
									equals_exp begin {bool}
										lhs = unary_minus_exp begin {int}
											exp = add_exp begin {int}
												lhs = 1 {int}

												rhs = mul_exp begin {int}
													lhs = 2 {int}

													rhs = 3 {int}
												mul_exp end
											add_exp end
										unary_minus_exp end

										rhs = 5 {int}
									equals_exp end
									exp_list end
							call_exp end

							idx = 0 {int}
						lookup_exp end
					mul_exp end
					;
					b {int}
					;
					true {bool}
					;
					lookup_exp begin {bool}
						var = a3 {[bool]}

						idx = 0 {int}
					lookup_exp end
					exp_list end
			call_exp end
		assign_stat end

	block end
func_def end

DONE inputs/test3.in

PARSING FILE inputs/test4.in
Name 'bananas' redeclaration, at location (3:1,3:15)
Name 'bananas' redeclaration, at location (4:1,4:15)
Incompatible return type, at location (7:2,7:10)
Incompatible return type, at location (11:2,11:8)
Got type {int}, which is incompatible with expected type {bool}, at location (15:9,15:9)
Got 1 arguments, but expected 0, at location (21:2,21:7)
Got 0 arguments, but expected 1, at location (25:2,25:6)
Name 'f5' redeclaration, at location (28:1,28:14)
Incompatible return type, at location (39:6,39:9)
Name 'a' is not a function, at location (41:6,41:8)
Name 'f6' is not a variable, at location (42:6,42:7)
Name 'f6' is not a variable, at location (43:2,43:3)
Type {bool} is not an integer, at location (45:6,45:12)
Type {int} is not an array, at location (46:7,46:10)
Type {int} is not an array, type {bool} is not an integer, at location (47:7,47:13)
Type {bool} is not an arithmetic type, at location (49:6,49:9)
Type {bool} is not an arithmetic type, at location (50:10,50:13)
Type {bool} is not an arithmetic type, at location (51:6,51:9)
Type {bool} is not an arithmetic type, at location (52:10,52:13)
Type {bool} is not an arithmetic type, at location (53:6,53:9)
Type {bool} is not an arithmetic type, at location (53:13,53:16)
Type {[int]} is not an arithmetic type, at location (55:6,55:7)
Type {[int]} is not an arithmetic type, at location (56:10,56:11)
Type {[int]} is not an arithmetic type, at location (57:6,57:7)
Type {[int]} is not an arithmetic type, at location (58:10,58:11)
Type {[int]} is not an arithmetic type, at location (59:6,59:7)
Type {[int]} is not an arithmetic type, at location (59:11,59:12)
Name not bound bananas2, at location (61:2,61:9)
Name not bound bananas3, at location (62:6,62:15)
Type {bool} is not an arithmetic type, at location (65:10,65:13)
Type {[int]} is not an arithmetic type, at location (66:11,66:12)
Got type {int}, which is incompatible with expected type {bool}, at location (68:8,68:8)
Got type {[bool]}, which is incompatible with expected type {bool}, at location (69:8,69:9)
Got type {int}, which is incompatible with expected type {bool}, at location (70:5,70:5)
Got type {int}, which is incompatible with expected type {bool}, at location (71:5,71:5)
DONE inputs/test4.in

